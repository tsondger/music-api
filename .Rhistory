knitr::opts_chunk$set(warning = F,
message = F,
echo = F)
library(ggplot2)
library(reader)
library(ggthemes)
library(knitr)
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(forcats)
library(readr)
library(readxl)
library(tibble)
library(kableExtra)
library(gt)
library(DBI)
library(RSQLite)
dbh <- dbConnect(RSQLite::SQLite(), "chinook.db")
tt <- DBI::dbListTables(dbh)
tt
conn <- dbConnect(RSQLite::SQLite(), "chinook.db")
tables <- DBI::dbListTables(conn)
tables <- DBI::dbListTables(conn) %>%
as_tibble()
View(tables)
knitr::opts_chunk$set(warning = F,
message = F,
echo = F)
library(ggplot2)
library(reader)
library(ggthemes)
library(knitr)
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(forcats)
library(readr)
library(readxl)
library(tibble)
library(kableExtra)
library(gt)
library(DBI)
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), "chinook.db")
tables <- DBI::dbListTables(conn) %>%
as_tibble()
View(tables)
tables$value
?DBI::dbGetQuery()
library(DBI)
?DBI::dbGetQuery()
?dbGetQuery()
?DBI::dbFetch()
?tibble()
?tibble::tibble()
?DBI::dbBegin()
?DBI::dbBegin(conn)
tt <- dbGetQuery(conn,
statement = "select top(100) * from albums")
tt <- dbGetQuery(conn,
statement = "select * from albums limit 10")
View(tt)
tt <- dbGetQuery(conn,
statement = "select * from albums")
View(tt)
View(tables)
tt2 <- dbGetQuery(conn,
statement = "select * from invoice_items limit 100")
View(tt2)
tt2 <- dbGetQuery(conn,
statement = "select * from invoices limit 100")
View(tt2)
View(tt)
tracks <- dbGetQuery(conn,
statement = "select * from tracks limit 100")
View(tracks)
conn <- dbConnect(RSQLite::SQLite(), "chinook.db")
tables <- DBI::dbListTables(conn) %>%
as_tibble()
tracks <- dbGetQuery(conn,
statement = "select * from tracks limit 100")
albums <- dbGetQuery(conn,
statement = "select * from albums limit 100")
genres <- dbGetQuery(conn,
statement = "select * from genres limit 100")
View(genres)
api_query <- dbGetQuery(conn,
statement = "select *
from tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join
genres as g
on g.GenreId = t.GenreId
limit 100")
View(api_query)
colnames(api_query)
api_query <- dbGetQuery(conn,
statement = "
select
t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name..14 as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
limit 100")
api_query <- dbGetQuery(conn,
statement = "
select
t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
limit 100")
api_query <- dbGetQuery(conn,
statement = "
select
t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
")
knitr::opts_chunk$set(warning = F,
message = F,
echo = F)
library(ggplot2)
library(reader)
library(ggthemes)
library(knitr)
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(forcats)
library(readr)
library(readxl)
library(tibble)
library(kableExtra)
library(gt)
library(DBI)
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), "chinook.db")
tables <- DBI::dbListTables(conn) %>%
as_tibble()
# Tracks to album to genre
tracks <- dbGetQuery(conn,
statement = "select * from tracks limit 100")
albums <- dbGetQuery(conn,
statement = "select * from albums limit 100")
genres <- dbGetQuery(conn,
statement = "select * from genres limit 100")
View(tracks)
colnames(tracks)
api_query <- dbGetQuery(conn,
statement = "
select
t.TrackId as Id
, t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
")
knitr::opts_chunk$set(warning = F,
message = F,
echo = F)
library(ggplot2)
library(reader)
library(ggthemes)
library(knitr)
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(forcats)
library(readr)
library(readxl)
library(tibble)
library(kableExtra)
library(gt)
library(DBI)
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), "chinook.db")
tables <- DBI::dbListTables(conn) %>%
as_tibble()
api_query <- dbGetQuery(conn,
statement = "
select
t.TrackId as Id
, t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
where t.TrackId=1
")
View(api_query)
knitr::opts_chunk$set(warning = F,
message = F,
echo = F)
library(ggplot2)
library(reader)
library(ggthemes)
library(knitr)
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(forcats)
library(readr)
library(readxl)
library(tibble)
library(kableExtra)
library(gt)
library(DBI)
library(RSQLite)
api_query <- dbGetQuery(conn,
statement = "
select
t.TrackId as Id
, t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
where t.TrackId=1
and
g.Name = 'Rock'
")
conn <- dbConnect(RSQLite::SQLite(), "chinook.db")
tables <- DBI::dbListTables(conn) %>%
as_tibble()
api_query <- dbGetQuery(conn,
statement = "
select
t.TrackId as Id
, t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
where t.TrackId=1
and
g.Name = 'Rock'
")
View(api_query)
api_query <- dbGetQuery(conn,
statement = "
select
t.TrackId as Id
, t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
#where t.TrackId=1
#and
g.Name = 'Rock'
")
api_query <- dbGetQuery(conn,
statement = "
select
t.TrackId as Id
, t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
where
#t.TrackId=1
#and
g.Name = 'Rock'
")
api_query <- dbGetQuery(conn,
statement = "
select
t.TrackId as Id
, t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
where
#t.TrackId=1
#and
g.Name = 'Rock'
")
api_query <- dbGetQuery(conn,
statement = "
select
t.TrackId as Id
, t.Name as TrackName
, t.Composer as Composer
, t.Milliseconds as Milliseconds
, a.Title as AlbumTitle
, g.Name as Genre
from
tracks as t
left join albums as a
on a.AlbumId = t.AlbumId
left join genres as g
on g.GenreId = t.GenreId
where
g.Name = 'Rock'
")
View(api_query)
unique_genres <- dbGetQuery(conn,
statement = "select distinct Name from genres")
View(unique_genres)
